/*! \page example_pf_3d Setting up a simple Particle Filter for a random 3D mobile target.
*
* This page shows how to use the abstract templatized implementation of the Particle Filter state estimation from RGBD_TOOLS.
* Particle Filteri is a Sequential Monte Carlo  nonlinear estate estimator. For deeper understanding it is recomended to dig on 
* internet. A good tutorial can be found in the following [link](https://www.youtube.com/watch?v=4S-sx5_cmLU)
* 
*
* RGBD_TOOLS implements a class that implement's  the particle filter algorithm for CPU called ParticleFilterCPU. It is a templatized
* class that performs the simulation of the particles and the resampling methods. Particles are required to inherit from ParticleInterface
* abstract class. The  observation structure can be of anykind and is part is the second template of the ParticleFilterCPU class.
*
* In this tutorial, a simple target which moves in one direction is tracked. In order to estimate the underlaying state. Eight landmarks
* are placed in the world and the observation state is the distance to these landmarks. One thousand particles are simulated and then the medium 
* value of the of the particles is used as the estimation. Additionally, the covariance is estimated using a gaussian distribution.
*
* @code
*       
*       #include <iostream>
*       #include <string>
*       
*       #include <mico/base/state_filtering/ParticleFilterCPU.h>
*       
*       #include <pcl/visualization/pcl_visualizer.h>
*       #include <Eigen/Eigen>
*       
*       #include <thread>
*       #include <chrono>
*       
*       
*       using namespace std;
*       using namespace mico ;
*       
*       
*       int WORLD_SIZE = 5;
*       
*       inline double gauss(const double & _nu, const double & _sigma) { 
*       	std::random_device rd; 
*       	std::mt19937 gen(rd()); 
*       
*       	std::normal_distribution<> d(_nu, _sigma); 
*       
*       	return d(gen); 
*       } 
*       
*       double LANDMARK_DIST = 5;
*       
*       const std::vector<Eigen::Vector3f> LANDMARKS = {
*       	{LANDMARK_DIST,LANDMARK_DIST,LANDMARK_DIST},
*       	{LANDMARK_DIST,LANDMARK_DIST,-LANDMARK_DIST},
*       	{LANDMARK_DIST,-LANDMARK_DIST,-LANDMARK_DIST},
*       	{-LANDMARK_DIST,-LANDMARK_DIST,-LANDMARK_DIST},
*       	{LANDMARK_DIST,-LANDMARK_DIST,LANDMARK_DIST},
*       	{-LANDMARK_DIST,-LANDMARK_DIST,LANDMARK_DIST},
*       	{-LANDMARK_DIST,LANDMARK_DIST,LANDMARK_DIST},
*       	{-LANDMARK_DIST,LANDMARK_DIST,-LANDMARK_DIST}
*       };
*       
*       const int N_LANDMARKS =  8;
*       
*       struct ObservationData{
*       	std::vector<float>distLandmarks;
*       };
*       
*       class ParticleRobot : public ParticleInterface<ObservationData>{
*       public:
*       
*       	int sign(float _x){
*       		return _x < 0? -1:1;
*       	}
*       
*       	ParticleRobot() {
*       		mPosition[0] = gauss(0,2);
*       		mPosition[1] = gauss(0,2);
*       		mPosition[2] = gauss(0,2);
*       		mSpeed[0] = gauss(0,1);
*       		mSpeed[1] = gauss(0,1);
*       		mSpeed[2] = gauss(0,1);
*       
*       		mSpeed[0] = fabs(mSpeed[0]) > 0.5? sign(mSpeed[0])*0.5 : mSpeed[0];
*       		mSpeed[1] = fabs(mSpeed[1]) > 0.5? sign(mSpeed[1])*0.5 : mSpeed[1];
*       		mSpeed[2] = fabs(mSpeed[2]) > 0.5? sign(mSpeed[2])*0.5 : mSpeed[2];
*       	}
*       	void simulate() { 
*       		mPosition[0] += mSpeed[0]*0.06;
*       		mPosition[1] += mSpeed[1]*0.06;
*       		mPosition[2] += mSpeed[2]*0.06;
*       
*       
*       		mSpeed[0] += gauss(0,0.2);
*       		mSpeed[1] += gauss(0,0.2);
*       		mSpeed[2] += gauss(0,0.2);
*       
*       		mSpeed[0] = fabs(mSpeed[0]) > 1.0? sign(mSpeed[0])*1.0 : mSpeed[0];
*       		mSpeed[1] = fabs(mSpeed[1]) > 1.0? sign(mSpeed[1])*1.0 : mSpeed[1];
*       		mSpeed[2] = fabs(mSpeed[2]) > 1.0? sign(mSpeed[2])*1.0 : mSpeed[2];
*       
*       		if(mPosition[0] > WORLD_SIZE)
*       			mPosition[0] -= WORLD_SIZE*2;
*       		else if (mPosition[0] < -WORLD_SIZE)
*       			mPosition[0] += WORLD_SIZE*2;
*       
*       		if(mPosition[1] > WORLD_SIZE)
*       			mPosition[1] -= WORLD_SIZE*2;
*       		else if (mPosition[1] < -WORLD_SIZE)
*       			mPosition[1] += WORLD_SIZE*2;
*       
*       		if(mPosition[2] > WORLD_SIZE)
*       			mPosition[2] -= WORLD_SIZE*2;
*       		else if (mPosition[2] < -WORLD_SIZE)
*       			mPosition[2] += WORLD_SIZE*2;
*       
*       	};
*       
*       	void simulateReal() { 
*       		mPosition[0] += mSpeed[0]*0.06;
*       		mPosition[1] += mSpeed[1]*0.06;
*       		mPosition[2] += mSpeed[2]*0.06;
*       
*       		if(mPosition[0] > WORLD_SIZE)
*       			mPosition[0] -= WORLD_SIZE*2;
*       		else if (mPosition[0] < -WORLD_SIZE)
*       			mPosition[0] += WORLD_SIZE*2;
*       
*       		if(mPosition[1] > WORLD_SIZE)
*       			mPosition[1] -= WORLD_SIZE*2;
*       		else if (mPosition[1] < -WORLD_SIZE)
*       			mPosition[1] += WORLD_SIZE*2;
*       
*       		if(mPosition[2] > WORLD_SIZE)
*       			mPosition[2] -= WORLD_SIZE*2;
*       		else if (mPosition[2] < -WORLD_SIZE)
*       			mPosition[2] += WORLD_SIZE*2;
*       
*       	};
*       
*       	ObservationData observation(){
*       		ObservationData data;
*       		for(unsigned i = 0; i < LANDMARKS.size(); i++){
*       			data.distLandmarks.push_back((mPosition - LANDMARKS[i]).norm() + gauss(0,0.2));
*       		}
*       		
*       		return data;
*       	}
*       
*       	double computeWeight(ObservationData &_observation) {  
*       		ObservationData fakeData = observation();
*       		ObservationData realData = _observation;
*       
*       		std::vector<float> distanceWeights;
*       
*       
*       		double score = 1;
*       		for(unsigned i = 0; i < fakeData.distLandmarks.size(); i++){
*       			score *= 1 - fabs(fakeData.distLandmarks[i] - realData.distLandmarks[i])/(WORLD_SIZE*2);
*       		}
*       
*       		return score;
*       	};
*       
*       	Eigen::Vector3f position(){ return mPosition; }
*       
*       private:
*       	Eigen::Vector3f mPosition;	// x, y, z
*       	Eigen::Vector3f mSpeed;	// x, y, z
*       
*       };
*       
*       //---------------------------------------------------------------------------------------------------------------------
*       Eigen::Vector3f mediumState(std::vector<ParticleRobot> _particles);
*       void particleFilterCPU();
*       
*       //---------------------------------------------------------------------------------------------------------------------
*       int main(void){
*       	
*       	particleFilterCPU();
*       
*       	std::cout << "Finished" << std::endl;
*       
*       }
*       
*       //---------------------------------------------------------------------------------------------------------------------
*       
*       Eigen::Vector3f mediumState(std::vector<ParticleRobot> _particles){
*       	Eigen::Vector3f position = {0.0, 0.0, 0.0};
*       	for (unsigned i = 0; i < _particles.size(); i++){
*       		Eigen::Vector3f pos = _particles[i].position();
*       		position[0] += pos[0];
*       		position[1] += pos[1];
*       		position[2] += pos[2];
*       	}
*       	position[0] /= _particles.size();
*       	position[1] /= _particles.size();
*       	position[2] /= _particles.size();
*       
*       	return position;
*       }
*       
*       void particleFilterCPU() {
*       
*       	ParticleFilterCPU<ParticleRobot, ObservationData> filter(1000);	
*       	filter.init();
*       
*       	ParticleRobot robot;
*       	double time = 0.0;
*       
*       	float cScaleFactor=1;
*       
*       	pcl::visualization::PCLVisualizer viewer ("viewer");
*       
*       	viewer.addCoordinateSystem(0.2);
*       	
*       	for (;;) {
*       		Eigen::Vector3f medState = mediumState(filter.particles());
*       		Eigen::Vector3f realState = robot.position();
*       		std::cout << "-------------------------------------------------------------------" << std::endl;
*       		std::cout << "Real state. X:" << realState[0] << " ; Y: " << realState[1] << " ; Z: " << realState[2] << std::endl;
*       		std::cout << "Promediate state. X:" << medState[0] << " ; Y: " << medState[1] << " ; Z: " << medState[2] << std::endl;
*       		std::cout << "Error. X:" << fabs(realState[0] - medState[0]) << " ; Y: " << fabs(realState[1] - medState[1]) << " ; Z: " << fabs(realState[2] -  medState[2]) << std::endl;
*       
*       		viewer.removeAllShapes();
*       		viewer.removeAllPointClouds();
*       		// Draw landmarks
*       		int counter = 0;
*       		for(auto &lm: LANDMARKS){
*       			viewer.addSphere(pcl::PointXYZ(lm[0],lm[1],lm[2]),0.15, 1,0,0,"sphere"+std::to_string(counter++));
*       		}
*       
*       		// Draw particles
*       		pcl::PointCloud<pcl::PointXYZRGB> particles;
*       		for(auto &particle: filter.particles()){
*       			pcl::PointXYZRGB p (0,0,255);
*       
*       			Eigen::Vector3f pos = particle.position();
*       			
*       			p.x = pos[0];
*       			p.y = pos[1];
*       			p.z = pos[2];
*       			particles.push_back(p);
*       		}
*       		viewer.addPointCloud(particles.makeShared(), "cloud_particles");
*       		viewer.setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 5, "cloud_particles");
*       			
*       
*       		// Draw robot
*       		viewer.addSphere(pcl::PointXYZ(realState[0],realState[1],realState[2]),0.2, 1,0,0,"sphere"+std::to_string(counter++));
*       
*       		// Estimate
*       		viewer.addSphere(pcl::PointXYZ(medState[0],medState[1],medState[2]),0.2, 0,1,0,"sphere"+std::to_string(counter++));
*       
*       
*       		viewer.spinOnce(30);
*       		std::this_thread::sleep_for(std::chrono::milliseconds(30));
*       
*       		robot.simulateReal();
*       		ObservationData obs = robot.observation();
*       		filter.step(obs);
*       
*       	}
*       }
*
*   @endcode
*
* This is the example running:
*   \image html pf_3d_simple.gif
*
* # Code snippets explained
*
* Various includes needed, namespaces and definition of world's size
* 
* @code
*       
*       #include <iostream>
*       #include <string>
*       #include <thread>
*       #include <chrono>
*       
*       #include <mico/base/state_filtering/ParticleFilterCPU.h>
*       
*       #include <Eigen/Eigen>
*       #include <pcl/visualization/pcl_visualizer.h>
*       
*       using namespace std;
*       using namespace mico ;
*              
*       int WORLD_SIZE = 5;
*       
* @endcode
*
* Random gaussian number generation wrapper for particles
*
* @code
*       inline double gauss(const double & _nu, const double & _sigma) { 
*       	std::random_device rd; 
*       	std::mt19937 gen(rd()); 
*       
*       	std::normal_distribution<> d(_nu, _sigma); 
*       
*       	return d(gen); 
*       } 
*       
* @endcode
*
* Definition of landmarks used to locate the robot
*
* @code
*       double LANDMARK_DIST = 5;
*       
*       const std::vector<Eigen::Vector3f> LANDMARKS = {
*       	{LANDMARK_DIST,LANDMARK_DIST,LANDMARK_DIST},
*       	{LANDMARK_DIST,LANDMARK_DIST,-LANDMARK_DIST},
*       	{LANDMARK_DIST,-LANDMARK_DIST,-LANDMARK_DIST},
*       	{-LANDMARK_DIST,-LANDMARK_DIST,-LANDMARK_DIST},
*       	{LANDMARK_DIST,-LANDMARK_DIST,LANDMARK_DIST},
*       	{-LANDMARK_DIST,-LANDMARK_DIST,LANDMARK_DIST},
*       	{-LANDMARK_DIST,LANDMARK_DIST,LANDMARK_DIST},
*       	{-LANDMARK_DIST,LANDMARK_DIST,-LANDMARK_DIST}
*       };
*       
*       const int N_LANDMARKS =  8;
*       
* @endcode
*
* Definition of the observation data
*
* @code
*       struct ObservationData{
*       	std::vector<float>distLandmarks;
*       };
*        
* @endcode
*
* Definition of particle class. Each particle is created in a random position and a random speed is assigned. The  speed of the robot is
* is limitted to 0.5. In this code, the simulated behaviour is separated from the real behaviour. A class that inherits from ParticleInterface
* needs to implement the "void simulate()" method, which is used by the particle filter to simulate particles. In this method, noise has been
* added to the speed of the particles to avoid particles to converge to a wrong state. Another method has been coded which is used only to 
* update the real state of the target which is called "void simulateReal()" the object that uses this method does not vary its speed. The
* "ObservationData observation()" method internally used to compute the observed data. Finally, the "double computeWeight(ObservationData _observation)"
* method is required to resample particles according to the real observed data.
*
* @code
*       class ParticleRobot : public ParticleInterface<ObservationData>{
*       public:
*       
*       	int sign(float _x){
*       		return _x < 0? -1:1;
*       	}
*       
*       	ParticleRobot() {
*       		mPosition[0] = gauss(0,2);
*       		mPosition[1] = gauss(0,2);
*       		mPosition[2] = gauss(0,2);
*       		mSpeed[0] = gauss(0,1);
*       		mSpeed[1] = gauss(0,1);
*       		mSpeed[2] = gauss(0,1);
*       
*       		mSpeed[0] = fabs(mSpeed[0]) > 0.5? sign(mSpeed[0])*0.5 : mSpeed[0];
*       		mSpeed[1] = fabs(mSpeed[1]) > 0.5? sign(mSpeed[1])*0.5 : mSpeed[1];
*       		mSpeed[2] = fabs(mSpeed[2]) > 0.5? sign(mSpeed[2])*0.5 : mSpeed[2];
*       	}
*       	void simulate() { 
*       		mPosition[0] += mSpeed[0]*0.06;
*       		mPosition[1] += mSpeed[1]*0.06;
*       		mPosition[2] += mSpeed[2]*0.06;
*       
*       
*       		mSpeed[0] += gauss(0,0.2);
*       		mSpeed[1] += gauss(0,0.2);
*       		mSpeed[2] += gauss(0,0.2);
*       
*       		mSpeed[0] = fabs(mSpeed[0]) > 1.0? sign(mSpeed[0])*1.0 : mSpeed[0];
*       		mSpeed[1] = fabs(mSpeed[1]) > 1.0? sign(mSpeed[1])*1.0 : mSpeed[1];
*       		mSpeed[2] = fabs(mSpeed[2]) > 1.0? sign(mSpeed[2])*1.0 : mSpeed[2];
*       
*       		if(mPosition[0] > WORLD_SIZE)
*       			mPosition[0] -= WORLD_SIZE*2;
*       		else if (mPosition[0] < -WORLD_SIZE)
*       			mPosition[0] += WORLD_SIZE*2;
*       
*       		if(mPosition[1] > WORLD_SIZE)
*       			mPosition[1] -= WORLD_SIZE*2;
*       		else if (mPosition[1] < -WORLD_SIZE)
*       			mPosition[1] += WORLD_SIZE*2;
*       
*       		if(mPosition[2] > WORLD_SIZE)
*       			mPosition[2] -= WORLD_SIZE*2;
*       		else if (mPosition[2] < -WORLD_SIZE)
*       			mPosition[2] += WORLD_SIZE*2;
*       
*       	};
*       
*       	void simulateReal() { 
*       		mPosition[0] += mSpeed[0]*0.06;
*       		mPosition[1] += mSpeed[1]*0.06;
*       		mPosition[2] += mSpeed[2]*0.06;
*       
*       		if(mPosition[0] > WORLD_SIZE)
*       			mPosition[0] -= WORLD_SIZE*2;
*       		else if (mPosition[0] < -WORLD_SIZE)
*       			mPosition[0] += WORLD_SIZE*2;
*       
*       		if(mPosition[1] > WORLD_SIZE)
*       			mPosition[1] -= WORLD_SIZE*2;
*       		else if (mPosition[1] < -WORLD_SIZE)
*       			mPosition[1] += WORLD_SIZE*2;
*       
*       		if(mPosition[2] > WORLD_SIZE)
*       			mPosition[2] -= WORLD_SIZE*2;
*       		else if (mPosition[2] < -WORLD_SIZE)
*       			mPosition[2] += WORLD_SIZE*2;
*       
*       	};
*       
*       	ObservationData observation(){
*       		ObservationData data;
*       		for(unsigned i = 0; i < LANDMARKS.size(); i++){
*       			data.distLandmarks.push_back((mPosition - LANDMARKS[i]).norm() + gauss(0,0.2));
*       		}
*       		
*       		return data;
*       	}
*       
*       	double computeWeight(ObservationData &_observation) {  
*       		ObservationData fakeData = observation();
*       		ObservationData realData = _observation;
*       
*       		std::vector<float> distanceWeights;
*       
*       
*       		double score = 1;
*       		for(unsigned i = 0; i < fakeData.distLandmarks.size(); i++){
*       			score *= 1 - fabs(fakeData.distLandmarks[i] - realData.distLandmarks[i])/(WORLD_SIZE*2);
*       		}
*       
*       		return score;
*       	};
*       
*       	Eigen::Vector3f position(){ return mPosition; }
*       
*       private:
*       	Eigen::Vector3f mPosition;	// x, y, z
*       	Eigen::Vector3f mSpeed;	// x, y, z
*       
*       };
*      
* @endcode
*
*  Declaration of functions and main function.
*
* @code  
*       //---------------------------------------------------------------------------------------------------------------------
*       Eigen::Vector3f mediumState(std::vector<ParticleRobot> _particles);
*       void particleFilterCPU();
*       
*       //---------------------------------------------------------------------------------------------------------------------
*       int main(void){
*       	
*       	particleFilterCPU();
*       
*       	std::cout << "Finished" << std::endl;
*       
*       }
*        
* @endcode
*
* Method to compute the medium value of the particles to use it as estimate.
*
* @code
*       //---------------------------------------------------------------------------------------------------------------------
*       
*       Eigen::Vector3f mediumState(std::vector<ParticleRobot> _particles){
*       	Eigen::Vector3f position = {0.0, 0.0, 0.0};
*       	for (unsigned i = 0; i < _particles.size(); i++){
*       		Eigen::Vector3f pos = _particles[i].position();
*       		position[0] += pos[0];
*       		position[1] += pos[1];
*       		position[2] += pos[2];
*       	}
*       	position[0] /= _particles.size();
*       	position[1] /= _particles.size();
*       	position[2] /= _particles.size();
*       
*       	return position;
*       }
*        
* @endcode
*
* Function that moves the real robot and performs the particle filter at each step. At first, the particle filter is created with the 
* appropiate templates `ParticleFilterCPU<ParticleRobot, ObservationData> filter(1000)` and then initialized `filter.init()`. A real robot
* is created using the same class for simplicity `ParticleRobot robot;`. At each step, the data is ploted in a `pcl::visualization::PCLVisualizer`.
* The real robot is simulated by `robot.simulateReal()` and its observation acquired `ObservationData obs = robot.observation()`. This 
* observation is used by the particle filter to update the particles (`filter.step(obs)`) which then are used to estimate the real state.
* 
* @code
*       void particleFilterCPU() {
*       
*       	ParticleFilterCPU<ParticleRobot, ObservationData> filter(1000);	
*       	filter.init();
*       
*       	ParticleRobot robot;
*       	double time = 0.0;
*       
*       	float cScaleFactor=1;
*       
*       	pcl::visualization::PCLVisualizer viewer ("viewer");
*       
*       	viewer.addCoordinateSystem(0.2);
*       	
*       	for (;;) {
*       		Eigen::Vector3f medState = mediumState(filter.particles());
*       		Eigen::Vector3f realState = robot.position();
*       		std::cout << "-------------------------------------------------------------------" << std::endl;
*       		std::cout << "Real state. X:" << realState[0] << " ; Y: " << realState[1] << " ; Z: " << realState[2] << std::endl;
*       		std::cout << "Promediate state. X:" << medState[0] << " ; Y: " << medState[1] << " ; Z: " << medState[2] << std::endl;
*       		std::cout << "Error. X:" << fabs(realState[0] - medState[0]) << " ; Y: " << fabs(realState[1] - medState[1]) << " ; Z: " << fabs(realState[2] -  medState[2]) << std::endl;
*       
*       		viewer.removeAllShapes();
*       		viewer.removeAllPointClouds();
*       		// Draw landmarks
*       		int counter = 0;
*       		for(auto &lm: LANDMARKS){
*       			viewer.addSphere(pcl::PointXYZ(lm[0],lm[1],lm[2]),0.15, 1,0,0,"sphere"+std::to_string(counter++));
*       		}
*       
*       		// Draw particles
*       		pcl::PointCloud<pcl::PointXYZRGB> particles;
*       		for(auto &particle: filter.particles()){
*       			pcl::PointXYZRGB p (0,0,255);
*       
*       			Eigen::Vector3f pos = particle.position();
*       			
*       			p.x = pos[0];
*       			p.y = pos[1];
*       			p.z = pos[2];
*       			particles.push_back(p);
*       		}
*       		viewer.addPointCloud(particles.makeShared(), "cloud_particles");
*       		viewer.setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 5, "cloud_particles");
*       			
*       
*       		// Draw robot
*       		viewer.addSphere(pcl::PointXYZ(realState[0],realState[1],realState[2]),0.2, 1,0,0,"sphere"+std::to_string(counter++));
*       
*       		// Estimate
*       		viewer.addSphere(pcl::PointXYZ(medState[0],medState[1],medState[2]),0.2, 0,1,0,"sphere"+std::to_string(counter++));
*       
*       
*       		viewer.spinOnce(30);
*       		std::this_thread::sleep_for(std::chrono::milliseconds(30));
*       
*       		robot.simulateReal();
*       		ObservationData obs = robot.observation();
*       		filter.step(obs);
*       
*       	}
*       }
*
*   @endcode
*
*/