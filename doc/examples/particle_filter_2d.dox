/*! \page example_pf_2d Setting up a simple Particle Filter for a simple 2D bicycle robot model
*
* This page shows how to use the abstract templatized implementation of the Particle Filter state estimation from RGBD_TOOLS.
* Particle Filteri is a Sequential Monte Carlo  nonlinear estate estimator. For deeper understanding it is recomended to dig on 
* internet. A good tutorial can be found in the following [link](https://www.youtube.com/watch?v=4S-sx5_cmLU)
* 
*
* RGBD_TOOLS implements a class that implement's  the particle filter algorithm for CPU called ParticleFilterCPU. It is a templatized
* class that performs the simulation of the particles and the resampling methods. Particles are required to inherit from ParticleInterface
* abstract class. The  observation structure can be of anykind and is part is the second template of the ParticleFilterCPU class.
*
* In this tutorial, a simple 2D bicycle robot model is used. One thousand particles are simulated and then the medium value of the 
* of the particles is used as the estimation. Additionally, the covariances can be used to estimate the uncertainty of the estimator.
*
* @code
*           #include <iostream>
*           #include <string>
*           #include <opencv2/opencv.hpp>
*           
*           #include <mico/base/state_filtering/ParticleFilterCPU.h>
*           
*           using namespace std;
*           using namespace mico ;
*           
*           int WORLD_SIZE = 300;
*           
*           inline double gauss(const double & _nu, const double & _sigma) { 
*           	std::random_device rd; 
*           	std::mt19937 gen(rd()); 
*           
*           	std::normal_distribution<> d(_nu, _sigma); 
*           
*           	return d(gen); 
*           } 
*           
*           struct ObservationData{
*           	double distanceOrigin = 0;
*           	double angle = 0;
*           };
*           
*           class ParticleRobot : public ParticleInterface<ObservationData>{
*           public:
*           	ParticleRobot() {
*           		mPosition[0] = gauss(WORLD_SIZE/2,25);
*           		mPosition[1] = gauss(WORLD_SIZE/2,25);
*           		mPosition[2] = gauss(0,1);
*           	}
*           	void simulate() { 
*           		mPosition[0] += 1*cos(mPosition[2]) + gauss(0,0.1);
*           		mPosition[1] += 1*sin(mPosition[2]) + gauss(0,0.1);
*           		mPosition[2] += gauss(0,0.05);
*           
*           		if(mPosition[0] > WORLD_SIZE)
*           			mPosition[0] = fmod(mPosition[0], WORLD_SIZE);
*           		else if (mPosition[0] < 0)
*           			mPosition[0] += WORLD_SIZE;
*           		
*           		if(mPosition[1] > WORLD_SIZE)
*           			mPosition[1] = fmod(mPosition[1], WORLD_SIZE);
*           		else if (mPosition[1] < 0)
*           			mPosition[1] += WORLD_SIZE;
*           
*           		if(mPosition[2] > M_PI*2)
*           			mPosition[2] = fmod(mPosition[2], M_PI*2);
*           
*           			
*           	};
*           
*           	ObservationData observation(){
*           		double xNoise = mPosition[0] + gauss(0,0.1);
*           		double yNoise = mPosition[1] + gauss(0,0.1);
*           
*           		ObservationData data;
*           		data.distanceOrigin = sqrt(xNoise*xNoise + yNoise*yNoise);
*           		data.angle = mPosition[2];
*           
*           		return data;
*           	}
*           
*           	double computeWeight(ObservationData &_observation) {  
*           		ObservationData fakeData = observation();
*           		ObservationData realData = _observation;
*           
*           		double weightDistance = 1 - fabs(fakeData.distanceOrigin-realData.distanceOrigin)/WORLD_SIZE/2;
*           		double weightAngle = 1 - fabs(fakeData.angle - realData.angle)/(M_PI*2);
*           
*           		return weightAngle*weightDistance;
*           	};
*           
*           	std::array<double, 3> position(){ return mPosition; }
*           	operator std::array<double, 3>(){ return mPosition; }
*           
*           private:
*           	std::array<double, 3> mPosition;	// x, y, ori
*           
*           };
*           
*           std::array<double, 3> mediumState(std::vector<ParticleRobot> _particles);
*           void particleFilterCPU();
*           
*           int main(void){
*           	
*           	particleFilterCPU();
*           
*           	std::cout << "Finished" << std::endl;
*           
*           }
*           
*           std::array<double, 3> mediumState(std::vector<ParticleRobot> _particles){
*           	std::array<double, 3> position = {0.0, 0.0, 0.0};
*           	for (unsigned i = 0; i < _particles.size(); i++){
*           		std::array<double, 3> pos = _particles[i];
*           		position[0] += pos[0];
*           		position[1] += pos[1];
*           		position[2] += pos[2];
*           	}
*           	position[0] /= _particles.size();
*           	position[1] /= _particles.size();
*           	position[2] /= _particles.size();
*           
*           	return position;
*           }
*           
*           void particleFilterCPU() {
*           
*           	ParticleFilterCPU<ParticleRobot, ObservationData> filter(1000);
*           	filter.init();
*           
*           	ParticleRobot robot;
*           	double time = 0.0;
*           
*           	float cScaleFactor=1;
*           
*           	cv::namedWindow("display", CV_WINDOW_FREERATIO);
*           	for (;;) {
*           		std::array<double, 3> medState = mediumState(filter.particles());
*           		std::array<double, 3> realState = robot.position();
*           		std::cout << "-------------------------------------------------------------------" << std::endl;
*           		std::cout << "Real state. X:" << realState[0] << " ; Y: " << realState[1] << " ; Ori: " << realState[2] << std::endl;
*           		std::cout << "Promediate state. X:" << medState[0] << " ; Y: " << medState[1] << " ; Ori: " << medState[2] << std::endl;
*           
*           		cv::Mat display(WORLD_SIZE, WORLD_SIZE, CV_8UC3, cv::Scalar(0,0,0));
*           		// Draw landmarks
*           		
*           		cv::circle(display, cv::Point2i(WORLD_SIZE/2, WORLD_SIZE/2), 3, cv::Scalar(0,0,255), 3);
*           
*           		// Draw particles
*           		for(auto &particle: filter.particles()){
*           			std::array<double, 3> pos = particle;
*           			cv::arrowedLine(display, 	cv::Point2i(pos[0]*cScaleFactor, pos[1]*cScaleFactor), 
*           										cv::Point2i(pos[0]*cScaleFactor, pos[1]*cScaleFactor) + cv::Point2i(cos(realState[2])*5*cScaleFactor, sin(realState[2])*5*cScaleFactor), 
*           										cv::Scalar(255,0,0), 1);
*           		}
*           
*           		// Draw robot
*           		cv::arrowedLine(display, 	cv::Point2i(realState[0]*cScaleFactor, realState[1]*cScaleFactor), 
*           									cv::Point2i(realState[0]*cScaleFactor, realState[1]*cScaleFactor) + cv::Point2i(cos(realState[2])*5*cScaleFactor, sin(realState[2])*5*cScaleFactor), 
*           									cv::Scalar(0,0,255), 2);
*           
*           		// Draw robot
*           		cv::arrowedLine(display, 	cv::Point2i(medState[0]*cScaleFactor, medState[1]*cScaleFactor), 
*           									cv::Point2i(medState[0]*cScaleFactor, medState[1]*cScaleFactor) + cv::Point2i(cos(medState[2])*5*cScaleFactor, sin(medState[2])*5*cScaleFactor), 
*           									cv::Scalar(0,255,0), 2);
*           
*           
*           		cv::imshow("display", display);
*           		cv::waitKey(3);
*           
*           		robot.simulate();
*           		ObservationData obs = robot.observation();
*           		filter.step(obs);
*           
*           	}
*           
*           }
*   @endcode
*
* This is the example running:
*   \image html pf_2d_simple.gif
*
* # Code snippets explained
*
* Header includes and constant for world size.
*
* @code
*           #include <iostream>
*           #include <string>
*           #include <opencv2/opencv.hpp>
*           
*           #include <mico/base/state_filtering/ParticleFilterCPU.h>
*           
*           using namespace std;
*           using namespace mico ;
*           
*           int WORLD_SIZE = 300;
*
* @endcode
*
* Function to generate random gaussian number. Particle filters works by sampling randomly variables. Thus adding noise to simulated
* robots is critical. 
*
* @code           
*           inline double gauss(const double & _nu, const double & _sigma) { 
*           	std::random_device rd; 
*           	std::mt19937 gen(rd()); 
*           
*           	std::normal_distribution<> d(_nu, _sigma); 
*           
*           	return d(gen); 
*           } 
*           
* @endcode
*
* Structure with observable variables. In this case, the distance to the origin of map and the angle of the robot are used. In a 
* more complex example, other variables can be used as for example distance from laser/sonar sensors, images, features or 
* landmarks.
*
* @code           
*           struct ObservationData{
*           	double distanceOrigin = 0;
*           	double angle = 0;
*           };
*                
* @endcode
*
* ParticleRobot class inherit from the ParticleInterface and is the class used for simulating the robot at each particle
* of the particle filter. The new class needs to implement two methods (which are abstract in the parent class): 
* `void simulate()` and `double computeWeight(ObservationData &_realObservation)`. The first method is responsible of simulating
* how the model updates over time. In this case, how the robot moves over time. The second method is responsible of computing
* an weight (or score) of how similar is the observation of the simulated particle and the real particle. This class is the 
* most important. The of the Particle Filter and its resampling depend of its implementation.
*
* @code
*           class ParticleRobot : public ParticleInterface<ObservationData>{
*           public:
*           	ParticleRobot() {
*           		mPosition[0] = gauss(WORLD_SIZE/2,25);
*           		mPosition[1] = gauss(WORLD_SIZE/2,25);
*           		mPosition[2] = gauss(0,1);
*           	}
*           	void simulate() { 
*           		mPosition[0] += 1*cos(mPosition[2]) + gauss(0,0.1);
*           		mPosition[1] += 1*sin(mPosition[2]) + gauss(0,0.1);
*           		mPosition[2] += gauss(0,0.05);
*           
*           		if(mPosition[0] > WORLD_SIZE)
*           			mPosition[0] = fmod(mPosition[0], WORLD_SIZE);
*           		else if (mPosition[0] < 0)
*           			mPosition[0] += WORLD_SIZE;
*           		
*           		if(mPosition[1] > WORLD_SIZE)
*           			mPosition[1] = fmod(mPosition[1], WORLD_SIZE);
*           		else if (mPosition[1] < 0)
*           			mPosition[1] += WORLD_SIZE;
*           
*           		if(mPosition[2] > M_PI*2)
*           			mPosition[2] = fmod(mPosition[2], M_PI*2);
*           
*           			
*           	};
*           
*           	ObservationData observation(){
*           		double xNoise = mPosition[0] + gauss(0,0.1);
*           		double yNoise = mPosition[1] + gauss(0,0.1);
*           
*           		ObservationData data;
*           		data.distanceOrigin = sqrt(xNoise*xNoise + yNoise*yNoise);
*           		data.angle = mPosition[2];
*           
*           		return data;
*           	}
*           
*           	double computeWeight(ObservationData &_realObservation) {  
*           		ObservationData fakeData = observation();
*           		ObservationData realData = _realObservation;
*           
*           		double weightDistance = 1 - fabs(fakeData.distanceOrigin-realData.distanceOrigin)/WORLD_SIZE/2;
*           		double weightAngle = 1 - fabs(fakeData.angle - realData.angle)/(M_PI*2);
*           
*           		return weightAngle*weightDistance;
*           	};
*           
*           	std::array<double, 3> position(){ return mPosition; }
*           	operator std::array<double, 3>(){ return mPosition; }
*           
*           private:
*           	std::array<double, 3> mPosition;	// x, y, ori
*           
*           };
*         
* @endcode
*
*  Declaration of functions and main function that calls to the principle method.
*
* @code  
*           std::array<double, 3> mediumState(std::vector<ParticleRobot> _particles);
*           void particleFilterCPU();
*           
*           int main(void){
*           	
*           	particleFilterCPU();
*           
*           	std::cout << "Finished" << std::endl;
*           
*           }
* @endcode
*
* Method that computes the average values of state variables of the robot.
*
* @code     
*           std::array<double, 3> mediumState(std::vector<ParticleRobot> _particles){
*           	std::array<double, 3> position = {0.0, 0.0, 0.0};
*           	for (unsigned i = 0; i < _particles.size(); i++){
*           		std::array<double, 3> pos = _particles[i];
*           		position[0] += pos[0];
*           		position[1] += pos[1];
*           		position[2] += pos[2];
*           	}
*           	position[0] /= _particles.size();
*           	position[1] /= _particles.size();
*           	position[2] /= _particles.size();
*           
*           	return position;
*           }
* @endcode
*
* This method initializes a particle filter using ParticleRobot class and ObservationData structure with one thousand particles. 
* Once the filter is initilized it endlessly performs simulation and draw the result using OpenCV.
*
* @code     
*           void particleFilterCPU() {
*           
*           	ParticleFilterCPU<ParticleRobot, ObservationData> filter(1000);
*           	filter.init();
*           
*           	ParticleRobot robot;
*           	double time = 0.0;
*           
*           	float cScaleFactor=1;
*           
*           	cv::namedWindow("display", CV_WINDOW_FREERATIO);
*           	for (;;) {
*           		std::array<double, 3> medState = mediumState(filter.particles());
*           		std::array<double, 3> realState = robot.position();
*           		std::cout << "-------------------------------------------------------------------" << std::endl;
*           		std::cout << "Real state. X:" << realState[0] << " ; Y: " << realState[1] << " ; Ori: " << realState[2] << std::endl;
*           		std::cout << "Promediate state. X:" << medState[0] << " ; Y: " << medState[1] << " ; Ori: " << medState[2] << std::endl;
*           
*           		cv::Mat display(WORLD_SIZE, WORLD_SIZE, CV_8UC3, cv::Scalar(0,0,0));
*           		// Draw landmarks
*           		
*           		cv::circle(display, cv::Point2i(WORLD_SIZE/2, WORLD_SIZE/2), 3, cv::Scalar(0,0,255), 3);
*           
*           		// Draw particles
*           		for(auto &particle: filter.particles()){
*           			std::array<double, 3> pos = particle;
*           			cv::arrowedLine(display, 	cv::Point2i(pos[0]*cScaleFactor, pos[1]*cScaleFactor), 
*           										cv::Point2i(pos[0]*cScaleFactor, pos[1]*cScaleFactor) + cv::Point2i(cos(realState[2])*5*cScaleFactor, sin(realState[2])*5*cScaleFactor), 
*           										cv::Scalar(255,0,0), 1);
*           		}
*           
*           		// Draw robot
*           		cv::arrowedLine(display, 	cv::Point2i(realState[0]*cScaleFactor, realState[1]*cScaleFactor), 
*           									cv::Point2i(realState[0]*cScaleFactor, realState[1]*cScaleFactor) + cv::Point2i(cos(realState[2])*5*cScaleFactor, sin(realState[2])*5*cScaleFactor), 
*           									cv::Scalar(0,0,255), 2);
*           
*           		// Draw robot
*           		cv::arrowedLine(display, 	cv::Point2i(medState[0]*cScaleFactor, medState[1]*cScaleFactor), 
*           									cv::Point2i(medState[0]*cScaleFactor, medState[1]*cScaleFactor) + cv::Point2i(cos(medState[2])*5*cScaleFactor, sin(medState[2])*5*cScaleFactor), 
*           									cv::Scalar(0,255,0), 2);
*           
*           
*           		cv::imshow("display", display);
*           		cv::waitKey(3);
*           
*           		robot.simulate();
*           		ObservationData obs = robot.observation();
*           		filter.step(obs);
*           
*           	}
*           
*           }
*   @endcode
*
*/